{"version":3,"sources":["services/movies-api.js","components/Searchbox.js","utils/getQueryParams.js","views/Movies.js"],"names":["BASEURL","KEY","fetchShowMoviesDetails","movieId","fetch","then","response","json","fetchMovieWithQuery","searchQuery","fetchtTrendingMovie","fetchtCastMovie","fetchtReviewsMovie","Searchbox","state","value","handleNameChange","event","setState","currentTarget","toLowerCase","hanleSubmit","preventDefault","trim","toast","warning","props","onSubmit","className","this","type","placeholder","onChange","Component","getQueryParams","string","queryString","parse","Movies","movies","searchMovie","status","error","fetchMovies","query","moviesApi","total_pages","Promise","reject","Error","results","catch","handleChangeQuery","history","push","pathname","location","search","prevProps","prevState","prevQuery","nextQuery","match","autoClose","position","map","movie","to","url","id","from","title","message","color","height","width"],"mappings":"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","file":"static/js/movies-page.bd880a54.chunk.js","sourcesContent":["// import axios from 'axios';\n\nconst BASEURL = 'https://api.themoviedb.org';\nconst KEY = '1cb71a91c76c2b28054ba391acc5b661';\n\nconst fetchShowMoviesDetails = movieId => {\n  return fetch(`${BASEURL}/3/movie/${movieId}?api_key=${KEY}&language=en-US`)\n    .then(response => response.json());\n};\n\nconst fetchMovieWithQuery = searchQuery => {\n  return fetch(`${BASEURL}/3/search/movie?api_key=${KEY}&query=${searchQuery}&language=en-US&page=1&include_adult=false`)\n    .then(response => response.json())\n}\n\nconst fetchtTrendingMovie = () => {\n  return fetch(`${BASEURL}/3/trending/movie/day?api_key=${KEY}`)\n  .then(response => response.json())\n}\n\nconst fetchtCastMovie = (movieId) => {\n  return fetch(`${BASEURL}/3/movie/${movieId}/credits?api_key=${KEY}&language=en-US`)\n  .then(response => response.json())\n}\n\nconst fetchtReviewsMovie = (movieId) => {\n  return fetch(`${BASEURL}/3/movie/${movieId}/reviews?api_key=${KEY}&language=en-US&page=1`)\n  .then(response => response.json())\n}\n\nexport default {\n  fetchShowMoviesDetails,\n  fetchMovieWithQuery,\n  fetchtTrendingMovie,\n  fetchtCastMovie,\n  fetchtReviewsMovie\n};\n","import PropTypes from 'prop-types';\nimport { toast } from 'react-toastify';\nimport { Component } from 'react';\n\n\nexport default class Searchbox extends Component {\n    state = {\n        value: '',\n    }\n\n    handleNameChange = event => {\n        this.setState({\n            value: event.currentTarget.value.toLowerCase()\n        });\n    }\n\n    hanleSubmit = event => {\n        event.preventDefault();\n\n        if (this.state.value.trim() === '') {\n           return toast.warning('Поле пошуку пусте!');  \n        }\n\n        this.props.onSubmit(this.state.value);\n\n        this.setState({value: '' });\n    }\n\n    render(){\n    return (\n            <form className=\"SearchForm\" onSubmit={this.hanleSubmit}> \n                <input\n                    className=\"SearchForm-input\"\n                    type=\"text\"\n                    placeholder=\"Search movie\"\n                    onChange={this.handleNameChange}\n            />\n             <button type=\"submit\" className=\"SearchForm-button\">\n                    Search\n                </button>\n            </form>\n    )\n    }; \n}\n\nSearchbox.propTypes = {\n    value: PropTypes.string,\n    onSubmit: PropTypes.func,\n\n}","import queryString from 'query-string';\n\nexport default function getQueryParams(string) {\n    return queryString.parse(string);\n}","import Loader from \"react-loader-spinner\";\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport moviesApi from 'services/movies-api';\nimport Searchbox from 'components/Searchbox';\nimport { ToastContainer} from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport getQueryParams from 'utils/getQueryParams';\n \nexport default class Movies extends Component {\n    state = {\n        movies: [],\n        searchMovie: '',\n        status: 'idle',\n        error: 'not found',\n    }\n\n    componentDidMount() {\n        const { query } = getQueryParams(this.props.location.search);\n        if (query) {\n            this.fetchMovies(query)\n            return;\n        }\n        this.fetchMovies('batman')\n    }\n\n    componentDidUpdate(prevProps, prevState) {\n        const { query: prevQuery} = getQueryParams(prevProps.location.search);\n        const { query: nextQuery } = getQueryParams(this.props.location.search);\n        if (prevQuery !== nextQuery) {\n            this.fetchMovies(nextQuery);\n        }\n    }\n\n    fetchMovies = query => {\n          this.setState({\n                    status: 'pending',\n                })\n        moviesApi\n            .fetchMovieWithQuery(query)\n            .then(response => {\n                if (response.total_pages === 0) {\n                    this.setState({\n                        movies: [],\n                        status: 'reject',\n                    })\n                    return Promise.reject(\n                        new Error(`This ${query} not found`)\n                    );\n                }\n            \n                this.setState({\n                    movies: response.results,\n                    status: 'resolved',\n                })\n            }\n        )\n            .catch(error => this.setState({ error, status: 'rejected' }));\n }\n   \n    handleChangeQuery = query => {\n        this.props.history.push({\n            pathname: this.props.location.pathname,\n            search: `query=${query}`,\n        })  \n    };\n\n    render() {\n        const { movies, status, error } = this.state;\n        const { match } = this.props;\n\n        return (\n            <>\n                <Searchbox onSubmit={this.handleChangeQuery} />\n                 <ToastContainer autoClose={3000} position=\"top-center\" />\n                    <ul>\n                    {movies.map(movie => (\n                        <li key={movie.id}>\n                            <Link to={{\n                                pathname: `${match.url}/${movie.id}`,\n                                state: { from: this.props.location }\n                            }} >\n                                 {movie.title}\n                            </Link>\n                    </li>))}\n                </ul>\n                {status === 'rejected' && <p>{error.message}</p>}\n                {status === 'pending' &&\n                <Loader\n                type=\"Circles\"\n                color=\"#00BFFF\"\n                height={100}\n                width={100}\n                />\n                }\n          </>  \n        );\n    }\n}\n\n\n"],"sourceRoot":""}